{
	"name": "df1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "s1"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText3",
						"type": "DatasetReference"
					},
					"name": "s2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "RemoveColumns1",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "ModifyColumns1",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "ModifyColumns2",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "ModifyColumns3",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          salary as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> s1",
				"source(output(",
				"          empid as string,",
				"          name as string,",
				"          department as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> s2",
				"s1, s2 join(s1@empid == s2@empid,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"split1@join1 select(mapColumn(",
				"          salary,",
				"          empid,",
				"          name,",
				"          department",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns1",
				"RemoveColumns1 derive(department = upper(department)) ~> ModifyColumns1",
				"ModifyColumns1 derive(salary = toInteger(salary)) ~> ModifyColumns2",
				"ModifyColumns2 derive(band = case(salary<50000,'low','high')) ~> ModifyColumns3",
				"ModifyColumns3 aggregate(groupBy(department),",
				"     salary_tot = sum(salary)) ~> aggregate1",
				"join1 split(isNull(department),",
				"     disjoint: false) ~> split1@(join1)",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          department as string,",
				"          salary_tot as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}